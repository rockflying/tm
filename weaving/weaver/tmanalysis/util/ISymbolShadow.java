package abc.tm.weaving.weaver.tmanalysis.util;

import java.util.Collection;
import java.util.Map;
import java.util.Set;

import soot.Local;
import soot.SootMethod;
import abc.tm.weaving.aspectinfo.TraceMatch;
import abc.tm.weaving.weaver.tmanalysis.query.ShadowRegistry;

public interface ISymbolShadow {

	/**
	 * @return the tracematch symbol name of this symbol shadow
	 */
	public String getSymbolName();

	/**
	 * @return the tracematch owning this shadow
	 */
	public TraceMatch getOwner();

	/**
	 * Returns the set of tracematch variables bound by this symbol-shadow.
	 */
	public Set<String> getBoundTmFormals();

	/**
	 * Returns the set of advice actuals ({@link Local}s) bound by this
	 * symbol shadow.
	 */
	public Collection<Local> getAdviceLocals();

	/**
	 * @param tracematchVariable a bound tracematch variable
	 * @return the {@link Local} that binds this variable at this shadow
	 * @see #getBoundTmFormals()
	 */
	public Local getAdviceLocalForVariable(String tracematchVariable);
	
	/**
	 * Returns a copy of the variable mapping from tracematch variables to
	 * advice locals.
	 */
	public Map<String,Local> getTmFormalToAdviceLocal();

	/**
	 * @return <code>true</code> if this shadow is enabled in the {@link ShadowRegistry}
	 */
	public boolean isEnabled();

	/**
	 * @return the unique ID of this shadow
	 */
	public String getUniqueShadowId();

	/**
	 * Returns the unique location ID for this shadow.
	 * This ID is unique to the static location the shadow applies to.
	 * So if two shadows apply to the same code location because they
	 * are generated by overlapping pointcuts, they will have the same
	 * location ID. 
	 */
	public String getLocationId();
	
	/**
	 * Returns <code>true</code> if this is an artificial shadow that does not have to be
	 * taken into account for side-effect information. We use such shadows occasionally
	 * to reset a tracematch state machine between two runs.  
	 */
	public boolean isArtificial();

	/**
	 * @return the method containing this shadow
	 */
	public SootMethod getContainer();

	/** 
	 * {@inheritDoc}
	 */
	public int hashCode();

	/** 
	 * {@inheritDoc}
	 */
	public boolean equals(Object obj);
}